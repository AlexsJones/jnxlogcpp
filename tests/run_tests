#!/bin/bash

SOURCE="../src/**/*.cpp"
#include use e.g. -I ../src
INCLUDES="-I ../src/logger -I ../src/appender -I ../src/utils"
COMPILER=$CXX
TESTCOMPILER=$TESTCOMPILER
function echo_red()
{
  tput setaf 1
  echo $1
  tput sgr0
}

function echo_green()
{
  tput setaf 4
  echo $1
  tput sgr0
}

function test_against_file()
{
  file=$1
  echo "Compiling $file"
  `$COMPILER $file $SOURCE $INCLUDES -o ${file:0:${#file}-4} -std=gnu++11 -lstdc++ -g -Wno-variadic-macros -ljnxc -pthread`
  echo "$COMPILER $file $SOURCE $INCLUDES -o ${file:0:${#file}-4} -std=gnu++11 -lstdc++ -g -Wno-variadic-macros -ljnxc -pthread"
  out=$?
  if [ ! $out -eq 0 ]; then
    echo "Compile failed!"
    exit 1
  fi
  if [ "$ARGS" == "DEBUG" ]; then
    echo "Using debugger..."
    if hash lldb 4>/dev/null; then
      echo "Running command => $TESTCOMPILER -f $current -o run -o exit"
      $TESTCOMPILER -f $current -o run -o exit
    else
      echo "Running command => $TESTCOMPILER --args $current"
      $TESTCOMPILER --args $current
    fi
  else
    ./$current
  fi
  out=$?
  if [ ! $out -eq 0 ]; then
    echo_red "Test failed"
    rm $current
    exit 1
  else
    echo_green "Test passed"
    rm $current
  fi
}

function run_full_suite()
{
  filelist=`ls *.cpp`
  for file in $filelist; do
    if [ "$file" == "run_tests" ] 
    then
      continue
    fi 
    current=${file:0:${#file}-4}
    if [ -e $current ]
    then
      rm $current
    fi
    echo "Running next test for --> ${file}"
    test_against_file $file
  done;
}

function run_single_test()
{
  filelist=`ls *.cpp`
  for file in $filelist; do
    if [ "$file" == "$1"  ]; then
      echo "found match"

      current=${file:0:${#file}-4}

      if [ -e $current ]
      then
        rm $current
      fi
      test_against_file $file  
    fi
  done
}

pushd tests
ARGS=$4
echo "Args => $ARGS"
if [ -z "$1"  ]; then 
  run_full_suite
else
  run_single_test $1
fi
popd
exit 0
